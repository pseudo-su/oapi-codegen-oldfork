// swagger{{.Code}} is a Base64 encoded, gzipped, json marshaled swaggerui.html template
var swagger{{.Code}} = []string{
{{range .Parts}}
    "{{.}}",{{end}}
}

// GetSwagger{{.Code}} returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger{{.Code}}(specURL string, redirectURL string) ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swagger{{.Code}}, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding swagger {{.Code}}: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	s := buf.String()
	// idx := strings.Index(s, "<!DOCTYPE html>")

	tmpl, err := template.
		New("swagger {{.Code}}").
		Delims("__LEFT_DELIM__", "__RIGHT_DELIM__").
		Parse(s)

	if err != nil {
		return nil, fmt.Errorf("error loading swagger {{.Code}} template: %s", err)
	}
	buf.Reset()
	data := struct {
		SpecURL string
		SwaggerUIRedirectURL string
	} {
		SpecURL: specURL,
		SwaggerUIRedirectURL: redirectURL,
	}
	
	tmpl.Execute(&buf, data)
	return buf.Bytes(), nil
}
